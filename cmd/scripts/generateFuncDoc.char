dirT := getEnv("GOPATH")

pathT := joinPath(dirT, `src`, `github.com`, `topxeq`, `charlang`, `builtins.go`)

path2T := joinPath(dirT, `src`, `github.com`, `topxeq`, `charlang`, `stdlib`, "ex", `module.go`)

mdPathT := joinPath(dirT, `src`, `github.com`, `topxeq`, `charlang`, `funcs.md`)

plt(pathT)

fcT := loadText(pathT)

checkErrX(fcT)

docBodyT := regFindFirst(fcT, `(?sm)// funcs start(.*?)// funcs end`, 1)

plt(docBodyT)

checkErrX(docBodyT)

// pln("done")

docBodyT = strReplace(docBodyT, "\r", "")

linesT := strSplitLines(docBodyT)

bufT := new("stringBuilder")

// plt(bufT)

// bufT.writeStr("## Charlang Builtin Function Reference\n\n")
writeStr(bufT, "## Charlang Builtin Function Reference\n\n")

// plt(bufT.toStr())

for i, v in linesT {
	tv := strTrim(v)

	if tv == "" {
		continue
	}

	pln(i, tv)

    tmp1 := regFindFirst(tv, `//\s+(.* related)`, 1)

    if !isErrX(tmp1) {
        writeStr(bufT, "### --- " + tmp1 + " ---" + "\n\n")
        continue
    }

    tmp1 = regFindFirstGroups(tv, `^"(.*?)":\s*\w+\s*,\s*//\s*(.*?)\s*$`)

    if !isErrX(tmp1) && len(tmp1) > 0 {
        writeStr(bufT, "**" + tmp1[1] + "**" + ": " + tmp1[2] + "\n\n")
        continue
    }

    tmp1 = regFindFirstGroups(tv, `^"(.*?)":\s*\w+\s*,\s*$`)

    if !isErrX(tmp1) && len(tmp1) > 0 {
        writeStr(bufT, "**" + tmp1[1] + "**" + "\n\n")
        continue
    }

    writeStr(bufT, tv + "\n")
}

// writeStr(bufT, "\n\n" + "```" + "\n" + docBodyT + "```" + "\n")

fc2T := loadText(path2T)

checkErrX(fc2T)

docBody2T := regFindFirst(fc2T, `(?sm)// funcs start(.*?)// funcs end`, 1)

plt(docBody2T)

checkErrX(docBody2T)

// pln("done")

docBody2T = strReplace(docBody2T, "\r", "")

lines2T := strSplitLines(docBody2T)

writeStr(bufT, "## Functions in module 'ex'\n\n")

for i, v in lines2T {
	tv := strTrim(v)

	if tv == "" {
		continue
	}

	pln(i, tv)

    tmp1 := regFindFirst(tv, `//\s+(.* related)`, 1)

    if !isErrX(tmp1) {
        writeStr(bufT, "### --- " + tmp1 + " ---" + "\n\n")
        continue
    }

    tmp1 = regFindFirstGroups(tv, `^Name:\s*"(.*?)"\s*,\s*//\s*(.*?)\s*$`)

    if !isErrX(tmp1) && len(tmp1) > 0 {
        writeStr(bufT, "**" + tmp1[1] + "**" + ": " + tmp1[2] + "\n\n")
        continue
    }

    tmp1 = regFindFirstGroups(tv, `^Name:\s*"(.*?)"\s*,\s*$`)

    if !isErrX(tmp1) && len(tmp1) > 0 {
        writeStr(bufT, "**" + tmp1[1] + "**" + "\n\n")
        continue
    }

    // writeStr(bufT, tv + "\n")
}

pln(bufT.toStr())

rs := saveText(toStr(bufT), mdPathT)
// rs := saveText(bufT.toStr(), mdPathT)

checkErrX(rs)

pln("done")

