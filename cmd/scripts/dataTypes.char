// Assign value to variables

a := 3 // assign an integer(int) value to variable 'a'

// function 'pl' is equivalent to the printf function in other languages, followed by an additional newline character "\n"
// and the conversion characters are the same as Golang, '%T' is used to output the value's type, '%v' is the general output format for any value
pl("[%T] %v", a, a)

// Instead of using '%T', which will output the native type in Golang(in which Charlang is written)
// function 'typeOf' is often used to get the type name of a variable in Charlang
pl("[%v] %v", typeOf(a), a)

b := 1.2 // float value

pl("[%v] %v", typeOf(b), b)

a = "abc" // assign another value with a different type(string value) to variable 'a'

pl("[%v] %v", typeOf(a), a)

// output a divide line
pln("------")

a = 1 // int value again

// assign a variable with function value type
f1 := func() {
	// since we use the ':=' operator, it will declare a new local variable with the same name 'a' which is already defined in global scope, but they are treated as different variables
	a := 6
}

// call the function 'f1'
// the function call will not result in change of the global variable 'a'
f1()

// the value held in 'a' will not be changed, stay in 1
pln("a:", a)

pln("------")

// define another anonymous function and call it
// and the value in global variable 'a' will be passed as the only function argument and has the name 'c' in the function body
func(c) {
	// here will change the value of global variable 'a'
	a = c

	b = a

	a = b + 9
}(a)

// here a will be 10
pln(a)

pln("------")

// Boolean values

b = true

// function 'prf' is the same as 'printf' in C/C++/Golang
prf("[%v] %v\n", typeOf(b), b)

c := false

prf("[%T] %v\n", c, c)

prf("!b = %v\n", !b)

prf("b == c: %v\n", b == c)

prf("1 > 14: %v\n", 1 > 14)

prf("b == true: %v\n", b == true)

prf("b && c: %v\n", b && c)

prf("b || c: %v\n", b || c)

// pln("------")

// // Integer

// c1 = 19

// c2 = 18

// pln(c1 + c2/3)

// pl("%T, %v", c1, c1)

// pl("%T", c1+c2)
// pl("%T", c2/3)
// pl("%T", c1+c2/3)
// pl("%T, %v", (c1+c2/3)*6, (c1+c2/3)*6)

// c1++
// c1 *= 3

// c2 += 5
// c2--

// pl("c1: %v, c2: %v, %T", c1, c2, c1)

// pln("------")

// // Float

// f1 = 1.32

// previus_f1 = f1

// f1 = f1 * 0.8

// print(previus_f1, "*", 0.8, "=", f1)
// pln()

// f2 = 0.99
// f2 /= 0.3

// print(0.99, "/", 0.3, "=", f2, "\n")

// pln("------")

// // String and Byte

// s1 = "abc"

// s2 = s1 + "3"

// pv("s2")

// pln(s1, "+", "3", "=", s2)

// s5 = "上善若水"

// pv("s5")

// s6 = []byte(s5)

// pln(s6)

// t = rune(5)
// pv("t")

// s7 = []rune("水利于万物而不争")

// pv("s7")

// pl("s5[1:2] = %#v", s5[1:2])

// pl("s6[1:2] = %#v", s6[1:2])

// pl("s7[1:2] = %#v", s7[1:2])

// pl("string(s7[1:3]) = %#v", string(s7[1:3]))

// pl("string([]byte(string(s7[1:3]))) = %#v", string([]byte(string(s7[1:3]))))

// pl("%c", s5[1])
// pl("%c", s6[1])
// pl("%c", s7[1])

// pl("%T, %#v", s5[1], s5[1])
// pl("%T, %#v", s6[1], s6[1])
// pl("%T, %#v", s7[1], s7[1])

// for i = 0; i < len(s5); i++ {
// 	pl("%v: %v", i, s5[i])
// }

// for v = range s7 {
// 	pl("%#T, %v", byte(v), byte(v))
// }

// pln("------")

// // nil type

// pv("aaa")

// pln(aaa)

// aaa = 18

// pv("aaa")

// pln("aaa")

// b = nil

// pv("b")

// pln(b)

// pln("------")

// c, errT = tk.StrToInt("12ab")

// if errT != nil {
// 	pln("Error:", errT.Error())
// }

// pv("c")

// pv("errT")

// c, errT = tk.StrToInt("123")

// pv("c")

// pv("errT")

// if errT != nil {
// 	pln("Error:", errT.Error())
// }

// pln("------")

// // Conversion

// a = 1
// b = int64(2)

// pln("type of a is:", type(a))
// pln("type of b is:", type(b))

// pln("a + b =", a+b)
// pl("a + b = %#v", a+b)

// a1 = tk.IntToStr(a)
// b1 = tk.IntToStr(b)

// pl("type of a1 is: %T", a1)
// pl("value of a1 is: %v", a1)
// pl("internal value of a1 is: %#v", a1)

// pln("a1 + b1 =", a1+b1)
// pl("a1 + b1 = %#v", a1+b1)

// a2 = tk.StrToFloat64WithDefaultValue(a1, 0)
// b2 = tk.StrToFloat64WithDefaultValue(b1, 0)

// pl("a2 + b2 = %#v", a2+b2)
// pl("type of a2 + b2 is: %T", a2+b2)

// getInputf("Press enter to exit...")
