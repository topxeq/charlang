// initialize a JavaScript Virtual Machine
vmT := jsVm()

// run a piece of JavaScript code, and return the last evaluation
rs := vmT.run(`
let a = 1.2

var b = a * 2.7

b
`)

// get and output the return result
pl("result: %v", rs)

// set a global value
vmT.set("c", "abc")

// eval is equivalent to run
rs2 := vmT.eval(`let d = "" + b + c; d`)

pl("result2: %v", rs2)

// get a global variable value from the VM
value_a := vmT.get("a")

pl("value a: %v(%v)", value_a, typeOf(value_a))

// set a function/delegate/callback with parameters, then call it
sourceT := `
param ...vargs

global inputG

pln(inputG, vargs)

return vargs[0] + vargs[1] + inputG[0]
`

d1 := delegate(sourceT)

d1c := d1.compile(vmT.get("b")) // pass another parameter(via global variable inputG which will be an array)

vmT.set("f1", d1c)

rs3 := vmT.run(`let d3 = f1(3, 5); d3`)

pl("result3: %v", rs3)



