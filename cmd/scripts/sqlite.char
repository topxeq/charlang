//This example demonstrates the creation, addition, deletion, and modification of SQLite 3 database by Charlang

dbFilePath := joinPath(getHomeDir(), `test.db`)

// Determine if the database already exists (SQLite database is placed in a single file)
// Place the results in variable b
b := fileExists(dbFilePath)

// If not, skip to the next step to continue execution
// If present, delete the file
if b {
	removeFile(dbFilePath)
}

// Create a new database
// dbConnect is used to connect to a database
// The first parameter besides the result parameter is the database driver name, which supports sqlite3, mysql, godror (i.e. Oracle), msql (i.e. MS SQLServer), etc
// The second parameter is the connection string, similar to server=129.0.3.99; port=1433; portNumber=1433; user id=sa; password=pass123; Database=hr or user/ pass@129.0.9.11 : 1521/testdb et al
// The driver of SQLite3 will create or connect databases based on files
// So the second parameter directly provides the database file path
db := dbConnect("sqlite3", dbFilePath)

// Determine if the creation (or connection) of the database has failed
// Is the Boolean type in rs indicating whether the variable db is the wrong object
// If it is an error object, otherwise output an error message and exit
if isErr(db) {
	pl("failed to create the database file: %v", getErrStr(db))
	exit()
}

// Place the variable sqlStmt into the table building SQL statement to be executed
sqlStmt := `create table TEST (ID integer not null primary key, CODE text);`

// Execute SQL statements, dbExec is used to execute SQL statements such as insert, delete, update, etc
rs := dbExec(db, sqlStmt)

// Determine if there was an SQL execution error, similar to when connecting to the database earlier
if isErr(rs) {
	pl("failed to create table in database: %v", getErrStr(rs))

	// When an error occurs, it needs to be closed because the database connection is already open
	dbClose(db)

	exit()
}

// Loop and insert 5 records into the database
sql := `insert into TEST(ID, CODE) values(?, ?)`

for i := 0; i < 5; i++ {
	// The genRandomStr function is used to generate random strings
	str1 := genRandomStr()

	rs = dbExec(db, sql, i, str1)

	if isErr(rs) {
		pl("failed to insert record into the database: %v", getErrStr(rs))
		dbClose(db)
		exit()
	}
}

// Perform database queries, verify and view the newly added records
sql = `select ID, CODE from TEST`

// The dbQuery function is used to execute a select statement
// The result will be an array, where each item represents a record in the query result set
// Each record is a mapping, and the key name corresponds to the field name in the database. The key value is the corresponding field value, but it is converted to a string type
rs = dbQuery(db, sql)

// The dbClose function is used to close a database connection
dbClose(db)

plt(rs)

// Convert the result set to JSON format using the toJson function for output viewing
jsonStr := toJson(rs, "-indent", "-sort")

pln(jsonStr)

